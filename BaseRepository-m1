import { inject } from '@adonisjs/core/build/standalone'
import { TransactionClient } from '@adonisjs/lucid/build/src/TransactionClient'
import { validator } from '@ioc:Adonis/Core/Validator'
import { ModelQueryBuilderContract } from '@ioc:Adonis/Lucid/Orm'
import { BaseRepositoryInterface } from 'App/Contract/BaseRepositoryInterface'
import AppExceptionError from 'App/Exceptions/AppExceptionError'

@inject()
export default abstract class BaseRepository<T> implements BaseRepositoryInterface {
  public model: any
  public validated: any = null
  public rules: any
  private dataCircle: any
  private id: number
  private trx: TransactionClient

  public getId(): number {
    return this.id
  }

  public setId(id: number): this {
    this.id = id
    return this
  }

  public constructor(model: any) {
    this.model = model
  }

  public setData(data: any) {
    this.dataCircle = data
  }

  public async validate(data?: any) {
    try {
      let dataCircles: any = data
      if (data == null) dataCircles = this.dataCircle
      const validasi: any = await validator.validate({
        schema: this.rules,
        data: dataCircles,
      })
      this.validated = validasi
      return this
    } catch (error) {
      const customErrors = {}
      if (error.flashToSession) {
        for (const key in error.messages) {
          if (error.messages.hasOwnProperty(key)) {
            customErrors[key] = error.messages[key][0] // Mengambil pesan pertama dari setiap jenis kesalahan
          }
        }
      }
      AppExceptionError.setError(customErrors, 403)
      throw new Error(error.message)
    }
  }

  public async updateValidate(rules: any, data?: any) {
    try {
      let dataCircles: any = data
      if (data == null) dataCircles = this.dataCircle
      const validasi: any = await validator.validate({
        schema: rules,
        data: dataCircles,
      })
      this.validated = validasi
    } catch (error) {
      const customErrors = {}
      if (error.flashToSession) {
        for (const key in error.messages) {
          if (error.messages.hasOwnProperty(key)) {
            customErrors[key] = error.messages[key][0] // Mengambil pesan pertama dari setiap jenis kesalahan
          }
        }
      }
      AppExceptionError.setError(customErrors, 403)
      throw new Error(error.message)
    }
    return this
  }

  public async create(propsData: any = null): Promise<T> {
    try {
      let data: any = propsData
      if (propsData === null) data = this.validated
      return await this.model.create(data)
    } catch (error) {
      throw new Error(error)
    }
  }

  public async update(): Promise<any> {
    try {
      return await this.model.query().where('id', this.getId()).update(this.dataCircle)
    } catch (error) {
      throw new Error(error)
    }
  }

  public async delete(id: number): Promise<any> {
    try {
      return await this.model.query().where('id', id).delete()
    } catch (error) {
      throw new Error(error)
    }
  }

  public async find(id: number, callback?: (query: any) => void | any): Promise<T> {
    try {
      const finded: any = this.model.query().where('id', id)
      if (callback) callback(finded).first()
      else finded.first()
      return await finded
    } catch (error) {
      throw new Error(error)
    }
  }

  public async findAll(): Promise<any> {
    try {
      return await this.model.query().select('*')
    } catch (error) {
      throw new Error(error)
    }
  }

  public async getPaginat(page: number = 10): Promise<any> {
    try {
      return await this.model.query().paginate(page)
    } catch (error) {
      throw new Error(error)
    }
  }

  public async search(search: string | number, props?: any): Promise<any[]> {
    try {
      return await this.model
        .query()
        .withScopes((scopes: any) => scopes.search(search, props))
        .limit(10)
    } catch (error) {
      throw new Error(error)
    }
  }
  public async getById(id: number, withArray?: string[], withFunc?: any[]): Promise<any> {
    try {
      const query: ModelQueryBuilderContract<typeof this.model> = this.model.query().where('id', id)

      if (withArray) {
        withArray.forEach((relation: string) => query.preload(relation))
      }
      if (withFunc) {
        withFunc.forEach((relation: any) => {
          for (const key in relation) {
            query.preload(key, relation[key])
          }
        })
      }

      const result = await query.first()
      if (!result) {
        throw new Error(`Record with id ${id} not found`)
      }
      return result
    } catch (error) {
      throw new Error(error.message || error)
    }
  }

  public async getQuery(callback: (query: any) => void): Promise<any> {
    try {
      const query = this.model.query()
      callback(query)
      return await query
    } catch (error) {
      throw new Error(error)
    }
  }

  public transaction(trx: any) {
    this.trx = trx
    return this
  }
}
